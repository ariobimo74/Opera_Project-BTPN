/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.btpn.opera.operationsurvey.model.impl;

import com.btpn.opera.operationsurvey.model.Responden;
import com.btpn.opera.operationsurvey.model.RespondenModel;
import com.btpn.opera.operationsurvey.model.RespondenSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Responden service. Represents a row in the &quot;responden&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>RespondenModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RespondenImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RespondenImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RespondenModelImpl
	extends BaseModelImpl<Responden> implements RespondenModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a responden model instance should use the <code>Responden</code> interface instead.
	 */
	public static final String TABLE_NAME = "responden";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"nik", Types.VARCHAR},
		{"full_name", Types.VARCHAR}, {"lob", Types.VARCHAR},
		{"division", Types.VARCHAR}, {"survey_operation_id", Types.BIGINT},
		{"total_value", Types.DOUBLE}, {"answer_record", Types.VARCHAR},
		{"submitted_date", Types.TIMESTAMP}, {"notes", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nik", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("full_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lob", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("division", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("survey_operation_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("total_value", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("answer_record", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("submitted_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("notes", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table responden (id LONG not null primary key,nik VARCHAR(75) null,full_name VARCHAR(75) null,lob VARCHAR(75) null,division VARCHAR(75) null,survey_operation_id LONG,total_value DOUBLE,answer_record VARCHAR(255) null,submitted_date DATE null,notes VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table responden";

	public static final String ORDER_BY_JPQL = " ORDER BY responden.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY responden.id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long SURVEYOPERATIONID_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Responden toModel(RespondenSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Responden model = new RespondenImpl();

		model.setId(soapModel.getId());
		model.setNik(soapModel.getNik());
		model.setFullName(soapModel.getFullName());
		model.setLob(soapModel.getLob());
		model.setDivision(soapModel.getDivision());
		model.setSurveyOperationId(soapModel.getSurveyOperationId());
		model.setTotalValue(soapModel.getTotalValue());
		model.setAnswerRecord(soapModel.getAnswerRecord());
		model.setSubmittedDate(soapModel.getSubmittedDate());
		model.setNotes(soapModel.getNotes());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Responden> toModels(RespondenSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Responden> models = new ArrayList<Responden>(soapModels.length);

		for (RespondenSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public RespondenModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Responden.class;
	}

	@Override
	public String getModelClassName() {
		return Responden.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Responden, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Responden, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Responden, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Responden)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Responden, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Responden, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Responden)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Responden, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Responden, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Responden>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Responden.class.getClassLoader(), Responden.class,
			ModelWrapper.class);

		try {
			Constructor<Responden> constructor =
				(Constructor<Responden>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Responden, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Responden, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Responden, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Responden, Object>>();
		Map<String, BiConsumer<Responden, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Responden, ?>>();

		attributeGetterFunctions.put("id", Responden::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<Responden, Long>)Responden::setId);
		attributeGetterFunctions.put("nik", Responden::getNik);
		attributeSetterBiConsumers.put(
			"nik", (BiConsumer<Responden, String>)Responden::setNik);
		attributeGetterFunctions.put("fullName", Responden::getFullName);
		attributeSetterBiConsumers.put(
			"fullName", (BiConsumer<Responden, String>)Responden::setFullName);
		attributeGetterFunctions.put("lob", Responden::getLob);
		attributeSetterBiConsumers.put(
			"lob", (BiConsumer<Responden, String>)Responden::setLob);
		attributeGetterFunctions.put("division", Responden::getDivision);
		attributeSetterBiConsumers.put(
			"division", (BiConsumer<Responden, String>)Responden::setDivision);
		attributeGetterFunctions.put(
			"surveyOperationId", Responden::getSurveyOperationId);
		attributeSetterBiConsumers.put(
			"surveyOperationId",
			(BiConsumer<Responden, Long>)Responden::setSurveyOperationId);
		attributeGetterFunctions.put("totalValue", Responden::getTotalValue);
		attributeSetterBiConsumers.put(
			"totalValue",
			(BiConsumer<Responden, Double>)Responden::setTotalValue);
		attributeGetterFunctions.put(
			"answerRecord", Responden::getAnswerRecord);
		attributeSetterBiConsumers.put(
			"answerRecord",
			(BiConsumer<Responden, String>)Responden::setAnswerRecord);
		attributeGetterFunctions.put(
			"submittedDate", Responden::getSubmittedDate);
		attributeSetterBiConsumers.put(
			"submittedDate",
			(BiConsumer<Responden, Date>)Responden::setSubmittedDate);
		attributeGetterFunctions.put("notes", Responden::getNotes);
		attributeSetterBiConsumers.put(
			"notes", (BiConsumer<Responden, String>)Responden::setNotes);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getNik() {
		if (_nik == null) {
			return "";
		}
		else {
			return _nik;
		}
	}

	@Override
	public void setNik(String nik) {
		_nik = nik;
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return "";
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_fullName = fullName;
	}

	@JSON
	@Override
	public String getLob() {
		if (_lob == null) {
			return "";
		}
		else {
			return _lob;
		}
	}

	@Override
	public void setLob(String lob) {
		_lob = lob;
	}

	@JSON
	@Override
	public String getDivision() {
		if (_division == null) {
			return "";
		}
		else {
			return _division;
		}
	}

	@Override
	public void setDivision(String division) {
		_division = division;
	}

	@JSON
	@Override
	public long getSurveyOperationId() {
		return _surveyOperationId;
	}

	@Override
	public void setSurveyOperationId(long surveyOperationId) {
		_columnBitmask |= SURVEYOPERATIONID_COLUMN_BITMASK;

		if (!_setOriginalSurveyOperationId) {
			_setOriginalSurveyOperationId = true;

			_originalSurveyOperationId = _surveyOperationId;
		}

		_surveyOperationId = surveyOperationId;
	}

	public long getOriginalSurveyOperationId() {
		return _originalSurveyOperationId;
	}

	@JSON
	@Override
	public double getTotalValue() {
		return _totalValue;
	}

	@Override
	public void setTotalValue(double totalValue) {
		_totalValue = totalValue;
	}

	@JSON
	@Override
	public String getAnswerRecord() {
		if (_answerRecord == null) {
			return "";
		}
		else {
			return _answerRecord;
		}
	}

	@Override
	public void setAnswerRecord(String answerRecord) {
		_answerRecord = answerRecord;
	}

	@JSON
	@Override
	public Date getSubmittedDate() {
		return _submittedDate;
	}

	@Override
	public void setSubmittedDate(Date submittedDate) {
		_submittedDate = submittedDate;
	}

	@JSON
	@Override
	public String getNotes() {
		if (_notes == null) {
			return "";
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Responden.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Responden toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Responden>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RespondenImpl respondenImpl = new RespondenImpl();

		respondenImpl.setId(getId());
		respondenImpl.setNik(getNik());
		respondenImpl.setFullName(getFullName());
		respondenImpl.setLob(getLob());
		respondenImpl.setDivision(getDivision());
		respondenImpl.setSurveyOperationId(getSurveyOperationId());
		respondenImpl.setTotalValue(getTotalValue());
		respondenImpl.setAnswerRecord(getAnswerRecord());
		respondenImpl.setSubmittedDate(getSubmittedDate());
		respondenImpl.setNotes(getNotes());

		respondenImpl.resetOriginalValues();

		return respondenImpl;
	}

	@Override
	public int compareTo(Responden responden) {
		long primaryKey = responden.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Responden)) {
			return false;
		}

		Responden responden = (Responden)obj;

		long primaryKey = responden.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		RespondenModelImpl respondenModelImpl = this;

		respondenModelImpl._originalSurveyOperationId =
			respondenModelImpl._surveyOperationId;

		respondenModelImpl._setOriginalSurveyOperationId = false;

		respondenModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Responden> toCacheModel() {
		RespondenCacheModel respondenCacheModel = new RespondenCacheModel();

		respondenCacheModel.id = getId();

		respondenCacheModel.nik = getNik();

		String nik = respondenCacheModel.nik;

		if ((nik != null) && (nik.length() == 0)) {
			respondenCacheModel.nik = null;
		}

		respondenCacheModel.fullName = getFullName();

		String fullName = respondenCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			respondenCacheModel.fullName = null;
		}

		respondenCacheModel.lob = getLob();

		String lob = respondenCacheModel.lob;

		if ((lob != null) && (lob.length() == 0)) {
			respondenCacheModel.lob = null;
		}

		respondenCacheModel.division = getDivision();

		String division = respondenCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			respondenCacheModel.division = null;
		}

		respondenCacheModel.surveyOperationId = getSurveyOperationId();

		respondenCacheModel.totalValue = getTotalValue();

		respondenCacheModel.answerRecord = getAnswerRecord();

		String answerRecord = respondenCacheModel.answerRecord;

		if ((answerRecord != null) && (answerRecord.length() == 0)) {
			respondenCacheModel.answerRecord = null;
		}

		Date submittedDate = getSubmittedDate();

		if (submittedDate != null) {
			respondenCacheModel.submittedDate = submittedDate.getTime();
		}
		else {
			respondenCacheModel.submittedDate = Long.MIN_VALUE;
		}

		respondenCacheModel.notes = getNotes();

		String notes = respondenCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			respondenCacheModel.notes = null;
		}

		return respondenCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Responden, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Responden, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Responden, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Responden)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Responden, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Responden, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Responden, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Responden)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Responden>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _id;
	private String _nik;
	private String _fullName;
	private String _lob;
	private String _division;
	private long _surveyOperationId;
	private long _originalSurveyOperationId;
	private boolean _setOriginalSurveyOperationId;
	private double _totalValue;
	private String _answerRecord;
	private Date _submittedDate;
	private String _notes;
	private long _columnBitmask;
	private Responden _escapedModel;

}