/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package responden.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

import responden.model.SurveyResponden;
import responden.model.SurveyRespondenModel;
import responden.model.SurveyRespondenSoap;

/**
 * The base model implementation for the SurveyResponden service. Represents a row in the &quot;survey_responden&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>SurveyRespondenModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SurveyRespondenImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SurveyRespondenImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SurveyRespondenModelImpl
	extends BaseModelImpl<SurveyResponden> implements SurveyRespondenModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a survey responden model instance should use the <code>SurveyResponden</code> interface instead.
	 */
	public static final String TABLE_NAME = "survey_responden";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"nik", Types.VARCHAR},
		{"survey_id", Types.BIGINT}, {"answer1", Types.DOUBLE},
		{"answer2", Types.DOUBLE}, {"answer3", Types.DOUBLE},
		{"answer4", Types.DOUBLE}, {"answer5", Types.DOUBLE},
		{"answer6", Types.DOUBLE}, {"answer7", Types.DOUBLE},
		{"answer8", Types.DOUBLE}, {"answer9", Types.DOUBLE},
		{"answer10", Types.DOUBLE}, {"note", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"submitted_date", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nik", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("survey_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("answer1", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("answer2", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("answer3", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("answer4", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("answer5", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("answer6", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("answer7", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("answer8", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("answer9", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("answer10", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("submitted_date", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table survey_responden (id LONG not null primary key,nik VARCHAR(75) null,survey_id LONG,answer1 DOUBLE,answer2 DOUBLE,answer3 DOUBLE,answer4 DOUBLE,answer5 DOUBLE,answer6 DOUBLE,answer7 DOUBLE,answer8 DOUBLE,answer9 DOUBLE,answer10 DOUBLE,note VARCHAR(75) null,status VARCHAR(75) null,submitted_date DATE null)";

	public static final String TABLE_SQL_DROP = "drop table survey_responden";

	public static final String ORDER_BY_JPQL =
		" ORDER BY surveyResponden.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY survey_responden.id ASC";

	public static final String DATA_SOURCE = "SurveyResponden";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		responden.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.responden.model.SurveyResponden"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		responden.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.responden.model.SurveyResponden"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		responden.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.responden.model.SurveyResponden"),
		true);

	public static final long NIK_COLUMN_BITMASK = 1L;

	public static final long SURVEYID_COLUMN_BITMASK = 2L;

	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SurveyResponden toModel(SurveyRespondenSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SurveyResponden model = new SurveyRespondenImpl();

		model.setId(soapModel.getId());
		model.setNik(soapModel.getNik());
		model.setSurveyId(soapModel.getSurveyId());
		model.setAnswer1(soapModel.getAnswer1());
		model.setAnswer2(soapModel.getAnswer2());
		model.setAnswer3(soapModel.getAnswer3());
		model.setAnswer4(soapModel.getAnswer4());
		model.setAnswer5(soapModel.getAnswer5());
		model.setAnswer6(soapModel.getAnswer6());
		model.setAnswer7(soapModel.getAnswer7());
		model.setAnswer8(soapModel.getAnswer8());
		model.setAnswer9(soapModel.getAnswer9());
		model.setAnswer10(soapModel.getAnswer10());
		model.setNote(soapModel.getNote());
		model.setStatus(soapModel.getStatus());
		model.setSubmittedDate(soapModel.getSubmittedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SurveyResponden> toModels(
		SurveyRespondenSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<SurveyResponden> models = new ArrayList<SurveyResponden>(
			soapModels.length);

		for (SurveyRespondenSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		responden.service.util.ServiceProps.get(
			"lock.expiration.time.responden.model.SurveyResponden"));

	public SurveyRespondenModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SurveyResponden.class;
	}

	@Override
	public String getModelClassName() {
		return SurveyResponden.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SurveyResponden, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SurveyResponden, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SurveyResponden, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((SurveyResponden)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SurveyResponden, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SurveyResponden, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SurveyResponden)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SurveyResponden, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SurveyResponden, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, SurveyResponden>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			SurveyResponden.class.getClassLoader(), SurveyResponden.class,
			ModelWrapper.class);

		try {
			Constructor<SurveyResponden> constructor =
				(Constructor<SurveyResponden>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<SurveyResponden, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<SurveyResponden, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<SurveyResponden, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<SurveyResponden, Object>>();
		Map<String, BiConsumer<SurveyResponden, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<SurveyResponden, ?>>();

		attributeGetterFunctions.put("id", SurveyResponden::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<SurveyResponden, Long>)SurveyResponden::setId);
		attributeGetterFunctions.put("nik", SurveyResponden::getNik);
		attributeSetterBiConsumers.put(
			"nik",
			(BiConsumer<SurveyResponden, String>)SurveyResponden::setNik);
		attributeGetterFunctions.put("surveyId", SurveyResponden::getSurveyId);
		attributeSetterBiConsumers.put(
			"surveyId",
			(BiConsumer<SurveyResponden, Long>)SurveyResponden::setSurveyId);
		attributeGetterFunctions.put("answer1", SurveyResponden::getAnswer1);
		attributeSetterBiConsumers.put(
			"answer1",
			(BiConsumer<SurveyResponden, Double>)SurveyResponden::setAnswer1);
		attributeGetterFunctions.put("answer2", SurveyResponden::getAnswer2);
		attributeSetterBiConsumers.put(
			"answer2",
			(BiConsumer<SurveyResponden, Double>)SurveyResponden::setAnswer2);
		attributeGetterFunctions.put("answer3", SurveyResponden::getAnswer3);
		attributeSetterBiConsumers.put(
			"answer3",
			(BiConsumer<SurveyResponden, Double>)SurveyResponden::setAnswer3);
		attributeGetterFunctions.put("answer4", SurveyResponden::getAnswer4);
		attributeSetterBiConsumers.put(
			"answer4",
			(BiConsumer<SurveyResponden, Double>)SurveyResponden::setAnswer4);
		attributeGetterFunctions.put("answer5", SurveyResponden::getAnswer5);
		attributeSetterBiConsumers.put(
			"answer5",
			(BiConsumer<SurveyResponden, Double>)SurveyResponden::setAnswer5);
		attributeGetterFunctions.put("answer6", SurveyResponden::getAnswer6);
		attributeSetterBiConsumers.put(
			"answer6",
			(BiConsumer<SurveyResponden, Double>)SurveyResponden::setAnswer6);
		attributeGetterFunctions.put("answer7", SurveyResponden::getAnswer7);
		attributeSetterBiConsumers.put(
			"answer7",
			(BiConsumer<SurveyResponden, Double>)SurveyResponden::setAnswer7);
		attributeGetterFunctions.put("answer8", SurveyResponden::getAnswer8);
		attributeSetterBiConsumers.put(
			"answer8",
			(BiConsumer<SurveyResponden, Double>)SurveyResponden::setAnswer8);
		attributeGetterFunctions.put("answer9", SurveyResponden::getAnswer9);
		attributeSetterBiConsumers.put(
			"answer9",
			(BiConsumer<SurveyResponden, Double>)SurveyResponden::setAnswer9);
		attributeGetterFunctions.put("answer10", SurveyResponden::getAnswer10);
		attributeSetterBiConsumers.put(
			"answer10",
			(BiConsumer<SurveyResponden, Double>)SurveyResponden::setAnswer10);
		attributeGetterFunctions.put("note", SurveyResponden::getNote);
		attributeSetterBiConsumers.put(
			"note",
			(BiConsumer<SurveyResponden, String>)SurveyResponden::setNote);
		attributeGetterFunctions.put("status", SurveyResponden::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<SurveyResponden, String>)SurveyResponden::setStatus);
		attributeGetterFunctions.put(
			"submittedDate", SurveyResponden::getSubmittedDate);
		attributeSetterBiConsumers.put(
			"submittedDate",
			(BiConsumer<SurveyResponden, Date>)
				SurveyResponden::setSubmittedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getNik() {
		if (_nik == null) {
			return "";
		}
		else {
			return _nik;
		}
	}

	@Override
	public void setNik(String nik) {
		_columnBitmask |= NIK_COLUMN_BITMASK;

		if (_originalNik == null) {
			_originalNik = _nik;
		}

		_nik = nik;
	}

	public String getOriginalNik() {
		return GetterUtil.getString(_originalNik);
	}

	@JSON
	@Override
	public long getSurveyId() {
		return _surveyId;
	}

	@Override
	public void setSurveyId(long surveyId) {
		_columnBitmask |= SURVEYID_COLUMN_BITMASK;

		if (!_setOriginalSurveyId) {
			_setOriginalSurveyId = true;

			_originalSurveyId = _surveyId;
		}

		_surveyId = surveyId;
	}

	public long getOriginalSurveyId() {
		return _originalSurveyId;
	}

	@JSON
	@Override
	public Double getAnswer1() {
		return _answer1;
	}

	@Override
	public void setAnswer1(Double answer1) {
		_answer1 = answer1;
	}

	@JSON
	@Override
	public Double getAnswer2() {
		return _answer2;
	}

	@Override
	public void setAnswer2(Double answer2) {
		_answer2 = answer2;
	}

	@JSON
	@Override
	public Double getAnswer3() {
		return _answer3;
	}

	@Override
	public void setAnswer3(Double answer3) {
		_answer3 = answer3;
	}

	@JSON
	@Override
	public Double getAnswer4() {
		return _answer4;
	}

	@Override
	public void setAnswer4(Double answer4) {
		_answer4 = answer4;
	}

	@JSON
	@Override
	public Double getAnswer5() {
		return _answer5;
	}

	@Override
	public void setAnswer5(Double answer5) {
		_answer5 = answer5;
	}

	@JSON
	@Override
	public Double getAnswer6() {
		return _answer6;
	}

	@Override
	public void setAnswer6(Double answer6) {
		_answer6 = answer6;
	}

	@JSON
	@Override
	public Double getAnswer7() {
		return _answer7;
	}

	@Override
	public void setAnswer7(Double answer7) {
		_answer7 = answer7;
	}

	@JSON
	@Override
	public Double getAnswer8() {
		return _answer8;
	}

	@Override
	public void setAnswer8(Double answer8) {
		_answer8 = answer8;
	}

	@JSON
	@Override
	public Double getAnswer9() {
		return _answer9;
	}

	@Override
	public void setAnswer9(Double answer9) {
		_answer9 = answer9;
	}

	@JSON
	@Override
	public Double getAnswer10() {
		return _answer10;
	}

	@Override
	public void setAnswer10(Double answer10) {
		_answer10 = answer10;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return "";
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public Date getSubmittedDate() {
		return _submittedDate;
	}

	@Override
	public void setSubmittedDate(Date submittedDate) {
		_submittedDate = submittedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, SurveyResponden.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SurveyResponden toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SurveyResponden>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SurveyRespondenImpl surveyRespondenImpl = new SurveyRespondenImpl();

		surveyRespondenImpl.setId(getId());
		surveyRespondenImpl.setNik(getNik());
		surveyRespondenImpl.setSurveyId(getSurveyId());
		surveyRespondenImpl.setAnswer1(getAnswer1());
		surveyRespondenImpl.setAnswer2(getAnswer2());
		surveyRespondenImpl.setAnswer3(getAnswer3());
		surveyRespondenImpl.setAnswer4(getAnswer4());
		surveyRespondenImpl.setAnswer5(getAnswer5());
		surveyRespondenImpl.setAnswer6(getAnswer6());
		surveyRespondenImpl.setAnswer7(getAnswer7());
		surveyRespondenImpl.setAnswer8(getAnswer8());
		surveyRespondenImpl.setAnswer9(getAnswer9());
		surveyRespondenImpl.setAnswer10(getAnswer10());
		surveyRespondenImpl.setNote(getNote());
		surveyRespondenImpl.setStatus(getStatus());
		surveyRespondenImpl.setSubmittedDate(getSubmittedDate());

		surveyRespondenImpl.resetOriginalValues();

		return surveyRespondenImpl;
	}

	@Override
	public int compareTo(SurveyResponden surveyResponden) {
		int value = 0;

		if (getId() < surveyResponden.getId()) {
			value = -1;
		}
		else if (getId() > surveyResponden.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SurveyResponden)) {
			return false;
		}

		SurveyResponden surveyResponden = (SurveyResponden)obj;

		long primaryKey = surveyResponden.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SurveyRespondenModelImpl surveyRespondenModelImpl = this;

		surveyRespondenModelImpl._originalNik = surveyRespondenModelImpl._nik;

		surveyRespondenModelImpl._originalSurveyId =
			surveyRespondenModelImpl._surveyId;

		surveyRespondenModelImpl._setOriginalSurveyId = false;

		surveyRespondenModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SurveyResponden> toCacheModel() {
		SurveyRespondenCacheModel surveyRespondenCacheModel =
			new SurveyRespondenCacheModel();

		surveyRespondenCacheModel.id = getId();

		surveyRespondenCacheModel.nik = getNik();

		String nik = surveyRespondenCacheModel.nik;

		if ((nik != null) && (nik.length() == 0)) {
			surveyRespondenCacheModel.nik = null;
		}

		surveyRespondenCacheModel.surveyId = getSurveyId();

		surveyRespondenCacheModel.answer1 = getAnswer1();

		surveyRespondenCacheModel.answer2 = getAnswer2();

		surveyRespondenCacheModel.answer3 = getAnswer3();

		surveyRespondenCacheModel.answer4 = getAnswer4();

		surveyRespondenCacheModel.answer5 = getAnswer5();

		surveyRespondenCacheModel.answer6 = getAnswer6();

		surveyRespondenCacheModel.answer7 = getAnswer7();

		surveyRespondenCacheModel.answer8 = getAnswer8();

		surveyRespondenCacheModel.answer9 = getAnswer9();

		surveyRespondenCacheModel.answer10 = getAnswer10();

		surveyRespondenCacheModel.note = getNote();

		String note = surveyRespondenCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			surveyRespondenCacheModel.note = null;
		}

		surveyRespondenCacheModel.status = getStatus();

		String status = surveyRespondenCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			surveyRespondenCacheModel.status = null;
		}

		Date submittedDate = getSubmittedDate();

		if (submittedDate != null) {
			surveyRespondenCacheModel.submittedDate = submittedDate.getTime();
		}
		else {
			surveyRespondenCacheModel.submittedDate = Long.MIN_VALUE;
		}

		return surveyRespondenCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SurveyResponden, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SurveyResponden, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SurveyResponden, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((SurveyResponden)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<SurveyResponden, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<SurveyResponden, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SurveyResponden, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((SurveyResponden)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, SurveyResponden>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _id;
	private String _nik;
	private String _originalNik;
	private long _surveyId;
	private long _originalSurveyId;
	private boolean _setOriginalSurveyId;
	private Double _answer1;
	private Double _answer2;
	private Double _answer3;
	private Double _answer4;
	private Double _answer5;
	private Double _answer6;
	private Double _answer7;
	private Double _answer8;
	private Double _answer9;
	private Double _answer10;
	private String _note;
	private String _status;
	private Date _submittedDate;
	private long _columnBitmask;
	private SurveyResponden _escapedModel;

}